{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataSetA",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DataSetB",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MergedAB",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Employee_Name as string,",
				"          Gender as string,",
				"          DateofBirth as string,",
				"          Zipcode as string,",
				"          Emp_Status as string,",
				"          Education as string,",
				"          PatientID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source1",
				"source(output(",
				"          marital_status as string,",
				"          children as string,",
				"          ancestry as string,",
				"          avg_commute as string,",
				"          daily_internet_use as string,",
				"          available_vehicles as string,",
				"          military_service as string,",
				"          disease as string,",
				"          {P. id} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source2",
				"source1, source2 join(PatientID == {P. id},",
				"     joinType:'inner',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MergedAB'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Employee_Name,",
				"          Gender,",
				"          DateofBirth,",
				"          Zipcode,",
				"          Emp_Status,",
				"          Education,",
				"          PatientID,",
				"          marital_status,",
				"          children,",
				"          ancestry,",
				"          avg_commute,",
				"          daily_internet_use,",
				"          available_vehicles,",
				"          military_service,",
				"          disease,",
				"          { id} = {P. id}",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}