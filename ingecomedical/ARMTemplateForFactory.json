{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ingecomedical"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storaged2d2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MergingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MergeDataSets",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Asource1": {},
									"Bsource2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MergeDataSets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Dataset A.csv",
						"container": "capstone4roman"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee_Name",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "DateofBirth",
						"type": "String"
					},
					{
						"name": "Zipcode",
						"type": "String"
					},
					{
						"name": "Emp_Status",
						"type": "String"
					},
					{
						"name": "Education",
						"type": "String"
					},
					{
						"name": "PatientID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DatasetB.csv",
						"container": "capstone4roman"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "marital_status",
						"type": "String"
					},
					{
						"name": "children",
						"type": "String"
					},
					{
						"name": "ancestry",
						"type": "String"
					},
					{
						"name": "avg_commute",
						"type": "String"
					},
					{
						"name": "daily_internet_use",
						"type": "String"
					},
					{
						"name": "available_vehicles",
						"type": "String"
					},
					{
						"name": "military_service",
						"type": "String"
					},
					{
						"name": "disease",
						"type": "String"
					},
					{
						"name": "P. id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetA_query')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DataSetA",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataSetA",
							"dataset": {
								"referenceName": "DataSetA",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DataSetA = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://storaged2d2.blob.core.windows.net/capstone4roman/Dataset A.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQueryA = let\r\n  Source = DataSetA,\r\n  #\"Capitalized each word\" = Table.TransformColumns(Source, {{\"Gender\", each Text.Proper(_), type nullable text}}),\r\n  #\"Capitalized each word 1\" = Table.TransformColumns(#\"Capitalized each word\", {{\"Emp_Status\", each Text.Proper(_), type nullable text}}),\r\n  #\"Capitalized each word 2\" = Table.TransformColumns(#\"Capitalized each word 1\", {{\"Education\", each Text.Proper(_), type nullable text}})\r\nin\r\n  #\"Capitalized each word 2\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetB_Query')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DataSetB",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataSetB",
							"dataset": {
								"referenceName": "DataSetB",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DataSetB = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://storaged2d2.blob.core.windows.net/capstone4roman/DatasetB.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = DataSetB,\r\n  #\"Capitalized each word\" = Table.TransformColumns(Source, {{\"marital_status\", each Text.Proper(_), type nullable text}}),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Capitalized each word\", {{\"ancestry\", \"Country\"}}),\r\n  #\"Capitalized each word 1\" = Table.TransformColumns(#\"Renamed columns\", {{\"disease\", each Text.Proper(_), type nullable text}})\r\nin\r\n  #\"Capitalized each word 1\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataSetA",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DataSetB",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_Name as string,",
						"          Gender as string,",
						"          DateofBirth as date,",
						"          Zipcode as string,",
						"          Emp_Status as string,",
						"          Education as string,",
						"          PatientID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          marital_status as string,",
						"          children as integer,",
						"          ancestry as string,",
						"          avg_commute as float,",
						"          daily_internet_use as float,",
						"          available_vehicles as integer,",
						"          military_service as string,",
						"          disease as string,",
						"          {P. id} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source2",
						"source1, source2 join(PatientID == {P. id},",
						"     joinType:'inner',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PatientID as integer,",
						"          Patient_Name as string,",
						"          Gender as string,",
						"          DateofBirth as date,",
						"          Zipcode as integer,",
						"          Emp_status as string,",
						"          Education as string,",
						"          Marital_Status as string,",
						"          No_Children as integer,",
						"          Ancestry as string,",
						"          Avg_Commute as double,",
						"          Daily_Internet_Use as double,",
						"          Avlbl_Vehicle as integer,",
						"          Military_Service as string,",
						"          Disease as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Patient_Name = Employee_Name,",
						"          Gender,",
						"          DateofBirth,",
						"          Zipcode,",
						"          Emp_status = Emp_Status,",
						"          Education,",
						"          PatientID,",
						"          Marital_Status = marital_status,",
						"          No_Children = children,",
						"          Ancestry = ancestry,",
						"          Avg_Commute = avg_commute,",
						"          Daily_Internet_Use = daily_internet_use,",
						"          Avlbl_Vehicle = available_vehicles,",
						"          Military_Service = military_service,",
						"          Disease = disease,",
						"          PatientID = {P. id}",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetA')]",
				"[concat(variables('factoryId'), '/datasets/DataSetB')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PatientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Patient_Name",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "DateofBirth",
						"type": "date"
					},
					{
						"name": "Zipcode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Emp_status",
						"type": "varchar"
					},
					{
						"name": "Education",
						"type": "varchar"
					},
					{
						"name": "Marital_Status",
						"type": "varchar"
					},
					{
						"name": "No_Children",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Ancestry",
						"type": "varchar"
					},
					{
						"name": "Avg_Commute",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Daily_Internet_Use",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avlbl_Vehicle",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Military_Service",
						"type": "varchar"
					},
					{
						"name": "Disease",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MedicalDatasetMerged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDataSets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "Asource1"
						},
						{
							"dataset": {
								"referenceName": "Excel2",
								"type": "DatasetReference"
							},
							"name": "Bsource2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Patient_ Name} as string,",
						"          Gender as string,",
						"          DateofBirth as date,",
						"          Zipcode as integer,",
						"          Emp_Status as string,",
						"          Education as string,",
						"          PatientID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> Asource1",
						"source(output(",
						"          PatientID as integer,",
						"          Marital_Status as string,",
						"          No_Children as integer,",
						"          Ancestry as string,",
						"          Avg_Commute as double,",
						"          Daily_Internet_Use as double,",
						"          Avlbl_Vehicle as integer,",
						"          Military_Service as string,",
						"          Disease as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> Bsource2",
						"Asource1, Bsource2 join(Asource1@PatientID == Bsource2@PatientID,",
						"     joinType:'inner',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PatientID as integer,",
						"          Patient_Name as string,",
						"          Gender as string,",
						"          DateofBirth as date,",
						"          Zipcode as integer,",
						"          Emp_status as string,",
						"          Education as string,",
						"          Marital_Status as string,",
						"          No_Children as integer,",
						"          Ancestry as string,",
						"          Avg_Commute as double,",
						"          Daily_Internet_Use as double,",
						"          Avlbl_Vehicle as integer,",
						"          Military_Service as string,",
						"          Disease as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PatientID = Asource1@PatientID,",
						"          Patient_Name = {Patient_ Name},",
						"          Gender,",
						"          DateofBirth,",
						"          Zipcode,",
						"          Emp_status = Emp_Status,",
						"          Education,",
						"          Marital_Status,",
						"          No_Children,",
						"          Ancestry,",
						"          Avg_Commute,",
						"          Daily_Internet_Use,",
						"          Avlbl_Vehicle,",
						"          Military_Service,",
						"          Disease",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/Excel2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DatasetA",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DatasetA&B.xls",
						"container": "capstone4roman"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DatasetB",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DatasetA&B.xls",
						"container": "capstone4roman"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PatientID as integer,",
						"          Patient_Name as string,",
						"          Gender as string,",
						"          DateofBirth as date,",
						"          Zipcode as integer,",
						"          Emp_status as string,",
						"          Education as string,",
						"          Marital_Status as string,",
						"          No_Children as integer,",
						"          Ancestry as string,",
						"          Avg_Commute as double,",
						"          Daily_Internet_Use as double,",
						"          Avlbl_Vehicle as integer,",
						"          Military_Service as string,",
						"          Disease as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 split(Gender==\"male\",",
						"     Gender==\"female\",",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> split1@(Male, Female)",
						"split1@Male sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"split1@Female sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PatientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Patient_Name",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "DateofBirth",
						"type": "date"
					},
					{
						"name": "Zipcode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Emp_status",
						"type": "varchar"
					},
					{
						"name": "Education",
						"type": "varchar"
					},
					{
						"name": "Marital_Status",
						"type": "varchar"
					},
					{
						"name": "No_Children",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Ancestry",
						"type": "varchar"
					},
					{
						"name": "Avg_Commute",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Daily_Internet_Use",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avlbl_Vehicle",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Military_Service",
						"type": "varchar"
					},
					{
						"name": "Disease",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MedicalDatasetMerged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MaleDataset"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FemaleDataset"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitGenderpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		}
	]
}